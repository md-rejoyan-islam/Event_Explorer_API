generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String          @unique
  password       String?
  role           Role?           @default(USER)
  bio            String?
  events         Event[]
  enrolledEvents EnrolledEvent[]
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  Message        Message[]

  @@map("users")
}

model Event {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  date           DateTime
  time           String
  location       String
  category       String
  description    String
  image          String
  price          Float
  capacity       Int
  status         Status          @default(DRAFT)
  additionalInfo String[]        @map("additional_info")
  organizer      User?           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String          @db.ObjectId
  EnrolledEvents EnrolledEvent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("events")
}

model EnrolledEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("enrolled_events")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  sender    User?    @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  DRAFT
  PUBLISHED
}
